// 新しいキャラクタークラスの雛形を作成するためのサンプルコード
// このクラスを使って、キャラクターのステータスを設定し、描画する方法を示しています。星マークがついていないところはコピペのままで大丈夫です。

//決めてもらうもの　〈クラス名〉、〈属性〉
//クラス名は好きな名前をつけてあげてください。
class NewCharacter extends Character {
  // (コンストラクタ：キャラクターの初期化を行う)
  NewCharacter(float x, float y, CharacterCountManager countManager) {
    // (スーパークラス（Character）のコンストラクタを呼び出す。)
    //キャラクター名、位置、属性を設定する
    
    /*☆ここは設定してください。⭐☆*/
    super("Tukune Character", x, y, 0, countManager); // 属性0はFire, 属性1はWater, 属性2はGrass
    /*☆                   ⭐☆*/
  }

  // キャラクターのステータスを初期化するメソッド
  void initializeStats() {
    /*☆ここは設定してください。⭐☆*/
    //全部で合計200までしか値は振れません。
    this.hp = 150;           // HPを100に設定 (HPは1〜200まで)
    this.attackPower = 50;   // 攻撃力を50に設定 (攻撃力は1〜100まで)
    this.speed = 75;         // 速度を50に設定 (速度は1〜100まで)
    /*                    ⭐☆*/
    
    //どれか一つでも満たさない要素があるとエラーを吐きます。
  }

  // キャラクターの表示メソッド：キャラクターを画面に描画する。
  /* ここのキャラクターを表示するプログラムは好きな描画プログラムを使って構いません。しかし, x,yを用いて描画してください。*/
  void display() {
     /*☆ここは設定してください。⭐☆*/
    /* 以下：例文ソースコードです。
    fill(255, 0, 0);         // キャラクターの塗りの色を赤に設定
    stroke(200, 0, 0);       // キャラクターの枠線の色を濃い赤に設定
    strokeWeight(3);         // 枠線の太さを3に設定

    // キャラクターの形状を定義し、描画する
    beginShape();            // 新しい形状を開始
    vertex(x, y);            // 頂点の位置（x, y）を設定
    vertex(x + 25, y - 40);  // 頂点の位置（x + 25, y - 40）を設定
    vertex(x + 50, y);       // 頂点の位置（x + 50, y）を設定
    vertex(x + 35, y + 50);  // 頂点の位置（x + 35, y + 50）を設定
    vertex(x + 15, y + 50);  // 頂点の位置（x + 15, y + 50）を設定
    endShape(CLOSE);         // 形状の描画を終了し、閉じた形にする
    */
    /*                    ⭐☆*/
     fill(0);
  rect(x+192,y+230,10,10);//  あたま
  rect(x+186,y+230,10,10);
  rect(x+180,y+230,10,10);
  rect(x+174,y+230,10,10);
  rect(x+168,y+225,10,10);
  rect(x+162,y+225,10,10);
  rect(x+154,y+220,10,10);
  rect(x+146,y+220,10,10);
  rect(x+139,y+210,10,10);
  rect(x+134,y+200,10,10);
  rect(x+134,y+190,10,10);
  rect(x+134,y+180,10,10);
  rect(x+134,y+170,10,10);
  rect(x+138,y+160,10,10);
   rect(x+146,y+155,10,10);
   rect(x+152,y+150,10,10);
   rect(x+158,y+150,10,10);
   rect(x+164,y+145,10,10);
   rect(x+172,y+145,10,10);
  rect(x+142,y+150,10,10);
  rect(x+148,y+140,10,10);
  rect(x+152,y+130,10,10);
  rect(x+160,y+120,10,10);//左の耳
  rect(x+168,y+130,10,10);
  rect(x+172,y+140,10,10);
  rect(x+182,y+145,10,10);
  rect(x+192,y+145,10,10);
  rect(x+202,y+145,10,10);
  rect(x+212,y+145,10,10);
  rect(x+222,y+140,10,10);
  rect(x+226,y+130,10,10);
  rect(x+234,y+120,10,10);//右の耳
  rect(x+242,y+130,10,10);
  rect(x+246,y+140,10,10);
  rect(x+252,y+150,10,10);
  rect(x+256,y+160,10,10);
  rect(x+260,y+170,10,10);
  rect(x+260,y+180,10,10);
  rect(x+260,y+190,10,10);
  rect(x+260,y+200,10,10);
  rect(x+255,y+210,10,10);
  rect(x+248,y+220,10,10);
  rect(x+240,y+220,10,10);
  rect(x+234,y+225,10,10);
  rect(x+228,y+225,10,10);
  rect(x+222,y+230,10,10);
  rect(x+216,y+230,10,10);
  rect(x+210,y+230,10,10);
  rect(x+204,y+230,10,10);
  rect(x+198,y+230,10,10);
  rect(x+168,y+235,10,10);//からだ
  rect(x+168,y+245,10,10);
  rect(x+164,y+255,10,10);
  rect(x+164,y+265,10,10);
  rect(x+168,y+275,10,10);
  rect(x+168,y+285,10,10);
  rect(x+164,y+290,10,10);//てまえのまえあし
  rect(x+160,y+296,10,10);
  rect(x+154,y+302,10,10);
  rect(x+148,y+308,10,10);
  rect(x+152,y+310,10,10);
  rect(x+158,y+312,10,10);
  rect(x+162,y+310,10,10);
  rect(x+166,y+308,10,10);
  rect(x+174,y+302,10,10);
  rect(x+180,y+296,10,10);
  rect(x+188,y+290,10,10);//おなか
  rect(x+196,y+290,10,10);
  rect(x+202,y+286,10,10);
  rect(x+208,y+286,10,10);
  rect(x+214,y+282,10,10);
  rect(x+220,y+282,10,10);
  rect(x+230,y+278,10,10);
  rect(x+240,y+278,10,10);
  rect(x+250,y+278,10,10);
  rect(x+260,y+278,10,10);
  rect(x+270,y+278,10,10);
  rect(x+280,y+278,10,10);
  rect(x+286,y+286,10,10);//てまえのうしろあし
  rect(x+290,y+292,10,10);
  rect(x+294,y+300,10,10);
  rect(x+298,y+306,10,10);
  rect(x+302,y+312,10,10);
  rect(x+306,y+312,10,10);
  rect(x+310,y+306,10,10);
  rect(x+310,y+296,10,10);
  rect(x+310,y+286,10,10);
  rect(x+310,y+276,10,10);
  rect(x+310,y+266,10,10);
  rect(x+310,y+256,10,10);
  rect(x+310,y+246,10,10);
  rect(x+305,y+240,10,10);
  rect(x+300,y+234,10,10);
  rect(x+295,y+228,10,10);
  rect(x+290,y+222,10,10);//せなか
  rect(x+280,y+222,10,10);
  rect(x+270,y+222,10,10);
  rect(x+260,y+222,10,10);
  rect(x+255,y+222,10,10);
  rect(x+192,y+296,10,10);//うらのまえあし
  rect(x+196,y+302,10,10);
  rect(x+200,y+308,10,10);
  rect(x+208,y+308,10,10);
  rect(x+212,y+302,10,10);
  rect(x+210,y+296,10,10);
  rect(x+264,y+285,10,10);//うらのうしろあし
  rect(x+261,y+290,10,10);
  rect(x+258,y+295,10,10);
  rect(x+255,y+300,10,10);
  rect(x+252,y+305,10,10);
  rect(x+256,y+308,10,10);
  rect(x+260,y+308,10,10);
  rect(x+270,y+305,10,10);
  rect(x+274,y+300,10,10);
  rect(x+278,y+295,10,10);
  rect(x+280,y+290,10,10);
  rect(x+300,y+226,10,10);//しっぽ
  rect(x+306,y+222,10,10);
  rect(x+312,y+218,10,10);
  rect(x+318,y+212,10,10);
  rect(x+322,y+206,10,10);
  rect(x+326,y+200,10,10);
  rect(x+330,y+194,10,10);
  rect(x+334,y+188,10,10);
  rect(x+340,y+186,10,10);
  rect(x+344,y+190,10,10);
  rect(x+344,y+198,10,10);
  rect(x+340,y+206,10,10);
  rect(x+336,y+214,10,10);
  rect(x+332,y+222,10,10);
  rect(x+326,y+228,10,10);
  rect(x+320,y+232,10,10);
  rect(x+314,y+238,10,10);
  rect(x+165,y+175,8,8);//かお
  rect(x+165,y+178,8,8);
  rect(x+200,y+175,8,8);
  rect(x+200,y+178,8,8);
  rect(x+180,y+195,5,5);
  rect(x+225,y+190,5,5);//みぎのひげ
  rect(x+230,y+189,5,5);
  rect(x+235,y+188,5,5);
  rect(x+240,y+187,5,5);
  rect(x+245,y+186,5,5);
  rect(x+225,y+200,5,5);
  rect(x+230,y+201,5,5);
  rect(x+235,y+202,5,5);
  rect(x+240,y+203,5,5);
  rect(x+245,y+204,5,5);
  rect(x+150,y+190,5,5);//ひだりのひげ
  rect(x+145,y+189,5,5);
  rect(x+150,y+200,5,5);
  rect(x+145,y+201,5,5);
  }
}
